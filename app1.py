import streamlit as st
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from xgboost import XGBClassifier
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
import time
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="–û–¥–æ–±—Ä–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–∞", layout="centered")

# –°—Ç–∏–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
RESULT_STYLE = """
<style>
    .result-box {
        font-size: 24px;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        margin-top: 20px;
    }
    .approved {
        background-color: #d4edda;
        color: #155724;
    }
    .denied {
        background-color: #f8d7da;
        color: #721c24;
    }
</style>
"""

st.markdown(RESULT_STYLE, unsafe_allow_html=True)

@st.cache_resource
def load_data_and_model():
    # URL CSV-—Ñ–∞–π–ª–∞ –Ω–∞ GitHub (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Å—Å—ã–ª–∫—É)
    url = 'https://raw.githubusercontent.com/yourusername/yourrepo/main/L_Score.csv' 
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    df = pd.read_csv(url, header=None)

    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –ø–æ—Ä—è–¥–æ–∫ —Ç–∞–∫–æ–≤):
    columns = [
        "age", "gender", "education", "income", "dependents", "housing",
        "monthly_rent", "loan_purpose", "interest_rate", "dti_ratio",
        "loan_term", "credit_score", "loan_approved", "zip_code"
    ]

    df.columns = columns

    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –∫–æ–ª–æ–Ω–æ–∫
    df = df.drop(columns=["zip_code"])

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    df["loan_approved"] = df["loan_approved"].map({"Yes": 1, "No": 0})

    # –í—ã–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    X = df.drop("loan_approved", axis=1)
    y = df["loan_approved"]

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    categorical_features = ["gender", "education", "housing", "loan_purpose"]
    preprocessor = ColumnTransformer(
        transformers=[
            ("cat", OneHotEncoder(handle_unknown='ignore'), categorical_features)
        ],
        remainder='passthrough'
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–π–ø–ª–∞–π–Ω–∞ —Å XGBClassifier
    model = Pipeline(steps=[
        ('preprocessor', preprocessor),
        ('classifier', XGBClassifier(use_label_encoder=False, eval_metric='logloss'))
    ])

    # –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏
    model.fit(X_train, y_train)

    return model

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
with st.spinner('–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...'):
    model = load_data_and_model()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("‚úÖ –ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥")
st.subheader("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞")

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
col1, col2 = st.columns(2)

with col1:
    age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=18, max_value=100, value=30)
    gender = st.selectbox("–ü–æ–ª", options=["male", "female"])
    education = st.selectbox("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", options=["High School", "Associate", "Bachelor", "Master", "Doctorate"])
    income = st.number_input("–î–æ—Ö–æ–¥ ($)", min_value=0, value=50000)
    dependents = st.number_input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∂–¥–∏–≤–µ–Ω—Ü–µ–≤", min_value=0, value=0)

with col2:
    housing = st.selectbox("–¢–∏–ø –∂–∏–ª—å—è", options=["OWN", "MORTGAGE", "RENT"])
    monthly_rent = st.number_input("–ï–∂–µ–º–µ—Å—è—á–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ($)", min_value=0, value=1500)
    loan_purpose = st.selectbox("–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞", options=[
        "DEBTCONSOLIDATION", "EDUCATION", "HOMEIMPROVEMENT", 
        "MEDICAL", "PERSONAL", "VENTURE"
    ])
    credit_score = st.number_input("–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", min_value=300, max_value=850, value=650)

# –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
if st.button("üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–¥–æ–±—Ä–µ–Ω–∏–µ"):
    input_data = pd.DataFrame([{
        "age": age,
        "gender": gender,
        "education": education,
        "income": income,
        "dependents": dependents,
        "housing": housing,
        "monthly_rent": monthly_rent,
        "loan_purpose": loan_purpose,
        "credit_score": credit_score,
        # –î—Ä—É–≥–∏–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–∏–º —É—Å–ª–æ–≤–Ω–æ –∏–ª–∏ —Å—Ä–µ–¥–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        "interest_rate": 10.0,
        "dti_ratio": 0.2,
        "loan_term": 3.0
    }])

    with st.spinner('–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...'):
        time.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
        prediction = model.predict(input_data)[0]

    if prediction == 1:
        st.markdown('<div class="result-box approved">‚úÖ –ö—Ä–µ–¥–∏—Ç –æ–¥–æ–±—Ä–µ–Ω</div>', unsafe_allow_html=True)
    else:
        st.markdown('<div class="result-box denied">‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ –æ–¥–æ–±—Ä–µ–Ω</div>', unsafe_allow_html=True)
else:
    st.info("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–µ–¥–∏—Ç–∞.")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
with st.sidebar:
    st.header("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    st.write("–≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è XGBoost –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞.")
    st.markdown("---")
    st.markdown("üìä **–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö:** L_Score.csv")
    st.markdown("üß† **–ú–æ–¥–µ–ª—å:** XGBClassifier")